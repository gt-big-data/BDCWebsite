import { DraggableCollectionOptions, DraggableCollectionState, DroppableCollectionState, DroppableCollectionStateOptions } from "@react-stately/dnd";
import { DraggableCollectionProps, DroppableCollectionProps } from "@react-types/shared";
import { DraggableItemProps, DraggableItemResult, DragPreview, DropIndicatorAria, DropIndicatorProps, DroppableCollectionOptions, DroppableCollectionResult, DroppableItemOptions, DroppableItemResult } from "@react-aria/dnd";
import { RefObject } from "react";
export interface DragHooks {
    useDraggableCollectionState(props: Omit<DraggableCollectionOptions, 'getItems'>): DraggableCollectionState;
    useDraggableItem(props: DraggableItemProps, state: DraggableCollectionState): DraggableItemResult;
    DragPreview: typeof DragPreview;
}
export interface DragHookOptions extends Omit<DraggableCollectionProps, 'preview'> {
}
export function useDragHooks(options: DragHookOptions): DragHooks;
export interface DropHooks {
    useDroppableCollectionState(props: DroppableCollectionStateOptions): DroppableCollectionState;
    useDroppableCollection(props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableCollectionResult;
    useDroppableItem(options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableItemResult;
    useDropIndicator(props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DropIndicatorAria;
}
export function useDropHooks(options: DroppableCollectionProps): DropHooks;

//# sourceMappingURL=types.d.ts.map
