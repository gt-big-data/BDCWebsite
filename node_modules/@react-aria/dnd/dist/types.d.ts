import React, { HTMLAttributes, RefObject, Key } from "react";
import { DropActivateEvent, DropEnterEvent, DropEvent, DropExitEvent, DropMoveEvent, DropOperation, DragTypes, DroppableCollectionProps, DropTargetDelegate, KeyboardDelegate, DropTarget, DragEndEvent, DragItem, DragMoveEvent, DragPreviewRenderer, DragStartEvent, DOMAttributes, DropItem, Collection, Node } from "@react-types/shared";
import { DroppableCollectionState, DraggableCollectionState } from "@react-stately/dnd";
import { AriaButtonProps } from "@react-types/button";
export interface DropOptions {
    ref: RefObject<HTMLElement>;
    /**
     * A function returning the drop operation to be performed when items matching the given types are dropped
     * on the drop target.
     */
    getDropOperation?: (types: DragTypes, allowedOperations: DropOperation[]) => DropOperation;
    getDropOperationForPoint?: (types: DragTypes, allowedOperations: DropOperation[], x: number, y: number) => DropOperation;
    /** Handler that is called when a valid drag enters the drop target. */
    onDropEnter?: (e: DropEnterEvent) => void;
    /** Handler that is called when a valid drag is moved within the drop target. */
    onDropMove?: (e: DropMoveEvent) => void;
    /**
     * Handler that is called after a valid drag is held over the drop target for a period of time.
     * This typically opens the item so that the user can drop within it.
     */
    onDropActivate?: (e: DropActivateEvent) => void;
    /** Handler that is called when a valid drag exits the drop target. */
    onDropExit?: (e: DropExitEvent) => void;
    /** Handler that is called when a valid drag is dropped on the drop target. */
    onDrop?: (e: DropEvent) => void;
}
export interface DropResult {
    dropProps: HTMLAttributes<HTMLElement>;
    isDropTarget: boolean;
}
export function useDrop(options: DropOptions): DropResult;
export interface DroppableCollectionOptions extends DroppableCollectionProps {
    keyboardDelegate: KeyboardDelegate;
    dropTargetDelegate: DropTargetDelegate;
}
export interface DroppableCollectionResult {
    collectionProps: HTMLAttributes<HTMLElement>;
}
export function useDroppableCollection(props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableCollectionResult;
export interface DroppableItemOptions {
    target: DropTarget;
}
export interface DroppableItemResult {
    dropProps: HTMLAttributes<HTMLElement>;
    isDropTarget: boolean;
}
export function useDroppableItem(options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DroppableItemResult;
export interface DropIndicatorProps {
    target: DropTarget;
}
export interface DropIndicatorAria {
    dropIndicatorProps: HTMLAttributes<HTMLElement>;
    isDropTarget: boolean;
    isHidden: boolean;
}
export function useDropIndicator(props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement>): DropIndicatorAria;
export interface DragOptions {
    onDragStart?: (e: DragStartEvent) => void;
    onDragMove?: (e: DragMoveEvent) => void;
    onDragEnd?: (e: DragEndEvent) => void;
    getItems: () => DragItem[];
    preview?: RefObject<DragPreviewRenderer>;
    getAllowedDropOperations?: () => DropOperation[];
}
export interface DragResult {
    dragProps: HTMLAttributes<HTMLElement>;
    dragButtonProps: AriaButtonProps;
    isDragging: boolean;
}
export function useDrag(options: DragOptions): DragResult;
export interface DraggableItemProps {
    key: Key;
}
export interface DraggableItemResult {
    dragProps: HTMLAttributes<HTMLElement>;
    dragButtonProps: AriaButtonProps;
}
export function useDraggableItem(props: DraggableItemProps, state: DraggableCollectionState): DraggableItemResult;
export interface DragPreviewProps {
    children: (items: DragItem[]) => JSX.Element;
}
export let DragPreview: React.ForwardRefExoticComponent<DragPreviewProps & React.RefAttributes<DragPreviewRenderer>>;
export interface ClipboardProps {
    getItems?: () => DragItem[];
    onCopy?: () => void;
    onCut?: () => void;
    onPaste?: (items: DropItem[]) => void;
}
export interface ClipboardResult {
    clipboardProps: DOMAttributes;
}
export function useClipboard(options: ClipboardProps): ClipboardResult;
export class ListDropTargetDelegate implements DropTargetDelegate {
    constructor(collection: Collection<Node<unknown>>, ref: RefObject<HTMLElement>);
    getDropTargetFromPoint(x: number, y: number, isValidDropTarget: (target: DropTarget) => boolean): DropTarget;
}
export type { DropTargetDelegate } from '@react-types/shared';

//# sourceMappingURL=types.d.ts.map
